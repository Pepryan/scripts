#!/bin/bash

# Script untuk memeriksa CVE-2019-15504/15505 (Kernel USB vulnerability)

# ========== KONFIGURASI ==========
# File yang berisi daftar IP instance
instances_file="instances.txt"

# User untuk koneksi SSH (ditambahkan ubuntu)
users=("ubuntu" "cloud-user" "centos")

# Kunci SSH
ssh_key="~/devops.pem"

# File output
output_file="hasil-cve-check.csv"

# Konfigurasi untuk skip IP berdasarkan range
# Set ke "true" untuk skip, "false" untuk tidak skip
SKIP_10_IPS="false"    # Skip IP 10.x.x.x
SKIP_172_IPS="true"    # Skip IP 172.x.x.x
SKIP_192_IPS="false"   # Skip IP 192.x.x.x

# ========== END KONFIGURASI ==========

# Warna untuk output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fungsi untuk logging dengan timestamp
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fungsi untuk menampilkan konfigurasi
show_configuration() {
    echo -e "${BLUE}========================================"
    echo "           KONFIGURASI SCRIPT"
    echo -e "========================================${NC}"
    echo "Instances file: $instances_file"
    echo "SSH users: ${users[*]}"
    echo "SSH key: $ssh_key"
    echo "Output file: $output_file"
    echo "Skip IP 10.x.x.x: $SKIP_10_IPS"
    echo -e "${YELLOW}Skip IP 172.x.x.x: $SKIP_172_IPS${NC}"
    echo "Skip IP 192.x.x.x: $SKIP_192_IPS"
    echo -e "${BLUE}========================================${NC}"
    echo ""
}

# Fungsi untuk parsing command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --skip-10)
                SKIP_10_IPS="true"
                shift
                ;;
            --include-10)
                SKIP_10_IPS="false"
                shift
                ;;
            --skip-172)
                SKIP_172_IPS="true"
                shift
                ;;
            --include-172)
                SKIP_172_IPS="false"
                shift
                ;;
            --skip-192)
                SKIP_192_IPS="true"
                shift
                ;;
            --include-192)
                SKIP_192_IPS="false"
                shift
                ;;
            --skip-all-private)
                SKIP_10_IPS="true"
                SKIP_172_IPS="false"
                SKIP_192_IPS="true"
                shift
                ;;
            --include-all-private)
                SKIP_10_IPS="false"
                SKIP_172_IPS="true"
                SKIP_192_IPS="false"
                shift
                ;;
            --instances-file)
                instances_file="$2"
                shift 2
                ;;
            --output-file)
                output_file="$2"
                shift 2
                ;;
            --ssh-key)
                ssh_key="$2"
                shift 2
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Fungsi untuk menampilkan help
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --skip-10               Skip IP addresses starting with 10.x.x.x"
    echo "  --include-10            Include IP addresses starting with 10.x.x.x (default)"
    echo "  --skip-172              Skip IP addresses starting with 172.x.x.x (default)"
    echo "  --include-172           Include IP addresses starting with 172.x.x.x"
    echo "  --skip-192              Skip IP addresses starting with 192.x.x.x"
    echo "  --include-192           Include IP addresses starting with 192.x.x.x (default)"
    echo "  --skip-all-private      Skip all private IP ranges (10.x, 192.x)"
    echo "  --include-all-private   Include all private IP ranges (10.x, 192.x)"
    echo "  --instances-file FILE   Specify instances file (default: instances.txt)"
    echo "  --output-file FILE      Specify output CSV file (default: hasil-cve-check.csv)"
    echo "  --ssh-key FILE          Specify SSH key file (default: ~/devops.pem)"
    echo "  --help, -h              Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                              # Run with default settings"
    echo "  $0 --include-172                # Include 172.x.x.x IP addresses"
    echo "  $0 --skip-10 --skip-192         # Skip both 10.x.x.x and 192.x.x.x"
    echo "  $0 --skip-all-private           # Skip all private IP ranges"
    echo "  $0 --include-all-private        # Include all private IP ranges"
    echo "  $0 --skip-172 --instances-file servers.txt"
    echo "  $0 --include-172 --output-file custom-results.csv"
}

# Hapus file output jika sudah ada dan tulis header CSV
initialize_output_file() {
    echo "ip,user,auth_method,kernel_version,kernel_vulnerable,module_loaded,module_status,connection_status" > "$output_file"
}

log_message "Memulai pemeriksaan CVE-2019-15504/15505 (Kernel USB vulnerability)..."

# Fungsi untuk test koneksi SSH dengan timeout
test_ssh_connection() {
    local ip=$1
    local user=$2
    local use_key=$3
    
    if [[ "$use_key" == "true" ]]; then
        timeout 15 ssh -i "$ssh_key" -l "$user" -o "ConnectTimeout=5" -o "ServerAliveInterval=5" -o "ServerAliveCountMax=2" -o "GSSAPIAuthentication=no" -o "PasswordAuthentication=no" -o "StrictHostKeyChecking=no" "$ip" "echo 'test'" &>/dev/null
    else
        timeout 15 ssh -l "$user" -o "ConnectTimeout=5" -o "ServerAliveInterval=5" -o "ServerAliveCountMax=2" -o "GSSAPIAuthentication=no" -o "PasswordAuthentication=yes" -o "StrictHostKeyChecking=no" "$ip" "echo 'test'" &>/dev/null
    fi
}

# Fungsi untuk menjalankan command via SSH dengan timeout
run_ssh_command() {
    local ip=$1
    local user=$2
    local use_key=$3
    local command=$4
    
    if [[ "$use_key" == "true" ]]; then
        timeout 20 ssh -i "$ssh_key" -l "$user" -o "ConnectTimeout=5" -o "ServerAliveInterval=5" -o "ServerAliveCountMax=2" -o "GSSAPIAuthentication=no" -o "PasswordAuthentication=no" -o "StrictHostKeyChecking=no" "$ip" "$command" 2>/dev/null
    else
        timeout 20 ssh -l "$user" -o "ConnectTimeout=5" -o "ServerAliveInterval=5" -o "ServerAliveCountMax=2" -o "GSSAPIAuthentication=no" -o "PasswordAuthentication=yes" -o "StrictHostKeyChecking=no" "$ip" "$command" 2>/dev/null
    fi
}

# Fungsi untuk memeriksa apakah IP harus di-skip berdasarkan range
should_skip_ip() {
    local ip=$1
    local skip_reason=""
    
    if [[ "$SKIP_10_IPS" == "true" && "$ip" =~ ^10\. ]]; then
        skip_reason="10.x.x.x"
        return 0  # Skip
    elif [[ "$SKIP_172_IPS" == "true" && "$ip" =~ ^172\. ]]; then
        skip_reason="172.x.x.x"
        return 0  # Skip
    elif [[ "$SKIP_192_IPS" == "true" && "$ip" =~ ^192\. ]]; then
        skip_reason="192.x.x.x"
        return 0  # Skip
    else
        return 1  # Don't skip
    fi
}

# Fungsi untuk memeriksa CVE-2019-15504/15505
check_cve_vulnerability() {
    local ip=$1
    local success=false
    
    # Loop untuk user dan method autentikasi menggunakan for
    for user in "${users[@]}"; do
        for use_key in "true" "false"; do
            if [[ "$use_key" == "true" ]]; then
                auth_method="SSH Key"
                log_message "Memeriksa IP: $ip dengan user: $user (menggunakan SSH key)"
            else
                auth_method="Password"
                log_message "Memeriksa IP: $ip dengan user: $user (tanpa SSH key)"
            fi
            
            # Test koneksi SSH
            if ! test_ssh_connection "$ip" "$user" "$use_key"; then
                log_message "Koneksi gagal/timeout ke $ip dengan user $user ($auth_method)"
                continue
            fi
            
            log_message "Koneksi berhasil ke $ip dengan user $user ($auth_method)"
            
            # ===== CVE-2019-15504/15505 Check =====
            
            # Check kernel version
            kernel_version=$(run_ssh_command "$ip" "$user" "$use_key" "uname -r")
            
            # Check if kernel is vulnerable (below kernel-4.18.0-553)
            kernel_vulnerable="Unknown"
            if [[ -n "$kernel_version" ]]; then
                # Extract version numbers for comparison
                if [[ "$kernel_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)-([0-9]+) ]]; then
                    major=${BASH_REMATCH[1]}
                    minor=${BASH_REMATCH[2]}
                    patch=${BASH_REMATCH[3]}
                    build=${BASH_REMATCH[4]}
                    
                    # Compare with 4.18.0-553
                    if [[ $major -lt 4 ]] || \
                       [[ $major -eq 4 && $minor -lt 18 ]] || \
                       [[ $major -eq 4 && $minor -eq 18 && $patch -eq 0 && $build -lt 553 ]]; then
                        kernel_vulnerable="VULNERABLE"
                    else
                        kernel_vulnerable="Not Vulnerable"
                    fi
                else
                    kernel_vulnerable="Cannot Parse Version"
                fi
            fi
            
            # Check if technisat_usb2 module is loaded
            module_loaded=$(run_ssh_command "$ip" "$user" "$use_key" "lsmod | grep technisat_usb2")
            
            if [[ -n "$module_loaded" ]]; then
                module_status="LOADED - POTENTIALLY VULNERABLE"
            else
                module_status="Not Loaded - SAFE"
            fi
            
            # Clean up variables untuk CSV
            kernel_version=${kernel_version:-"Unknown"}
            
            # Tulis hasil ke CSV
            echo "$ip,$user,$auth_method,$kernel_version,$kernel_vulnerable,$module_loaded,$module_status,Success" >> "$output_file"
            
            # Output ke console dengan warna
            echo -e "${GREEN}✓${NC} $ip - User: $user ($auth_method)"
            echo -e "  Kernel: $kernel_version - ${kernel_vulnerable}"
            echo -e "  Module: ${module_status}"
            echo ""
            
            success=true
            break 2  # Keluar dari kedua loop jika berhasil
        done
    done
    
    # Jika semua user gagal, tetap tulis output
    if [[ "$success" == false ]]; then
        echo -e "${RED}✗${NC} $ip - Timeout atau tidak bisa terhubung dengan semua kombinasi user/auth"
        echo "$ip,All Users Failed,Timeout/Failed,-,-,-,-,Connection Failed" >> "$output_file"
    fi
}

# Fungsi untuk membuat ringkasan hasil
create_summary() {
    log_message "Membuat ringkasan hasil..."
    
    total_hosts=$(tail -n +2 "$output_file" | wc -l)
    successful_connections=$(grep "Success" "$output_file" | wc -l)
    failed_connections=$(grep "Connection Failed" "$output_file" | wc -l)
    skipped_hosts=$(grep "Skipped" "$output_file" | wc -l)
    
    kernel_vulnerable=$(grep "VULNERABLE" "$output_file" | wc -l)
    module_loaded=$(grep "LOADED - POTENTIALLY VULNERABLE" "$output_file" | wc -l)
    
    echo ""
    echo "========================================"
    echo "           RINGKASAN HASIL"
    echo "========================================"
    echo "Total hosts yang diperiksa: $total_hosts"
    echo "Koneksi berhasil: $successful_connections"
    echo "Koneksi gagal: $failed_connections"
    echo "Hosts yang di-skip: $skipped_hosts"
    echo ""
    echo "CVE-2019-15504/15505 (Kernel USB):"
    echo "  - Kernel vulnerable: $kernel_vulnerable"
    echo "  - Module technisat_usb2 loaded: $module_loaded"
    echo ""
    echo "Konfigurasi yang digunakan:"
    echo "  - SSH Users: ${users[*]}"
    echo "  - Skip IP 10.x.x.x: $SKIP_10_IPS"
    echo "  - Skip IP 172.x.x.x: $SKIP_172_IPS"
    echo "  - Skip IP 192.x.x.x: $SKIP_192_IPS"
    echo ""
    echo "Hasil detail tersimpan di: $output_file"
    echo "========================================"
}

# Parse command line arguments
parse_arguments "$@"

# Tampilkan konfigurasi
show_configuration

# Initialize output file
initialize_output_file

# Validasi file instances.txt
if [[ ! -f "$instances_file" ]]; then
    log_message "ERROR: File $instances_file tidak ditemukan!"
    exit 1
fi

# Validasi SSH key (optional karena ada fallback ke password)
if [[ ! -f "${ssh_key/#\~/$HOME}" ]]; then
    log_message "WARNING: SSH key $ssh_key tidak ditemukan! Akan mencoba password authentication."
fi

# Baca IP dari file instances.txt dan lakukan pengecekan menggunakan for loop
# Ubah dari while ke for loop dengan mapfile
mapfile -t ip_list < "$instances_file"

for ip in "${ip_list[@]}"; do
    # Skip empty lines tapi tambahkan newline ke output
    if [[ -z "$ip" ]]; then
        echo "" >> "$output_file"
        continue
    fi
    
    # Skip comments tapi tambahkan ke output
    if [[ "$ip" =~ ^#.* ]]; then
        echo "$ip,Comment,-,-,-,-,-,Skipped" >> "$output_file"
        continue
    fi
    
    # Check apakah IP harus di-skip berdasarkan range
    if should_skip_ip "$ip"; then
        # Determine skip reason
        if [[ "$SKIP_10_IPS" == "true" && "$ip" =~ ^10\. ]]; then
            skip_reason="10.x.x.x"
        elif [[ "$SKIP_172_IPS" == "true" && "$ip" =~ ^172\. ]]; then
            skip_reason="172.x.x.x"
        elif [[ "$SKIP_192_IPS" == "true" && "$ip" =~ ^192\. ]]; then
            skip_reason="192.x.x.x"
        fi
        
        log_message "Skipping IP $ip ($skip_reason - configured to skip)"
        echo "$ip,-,Skipped ($skip_reason),-,-,-,-,-,Skipped" >> "$output_file"
        continue
    fi
    
    check_cve_vulnerability "$ip"
done

# Buat ringkasan hasil
create_summary

log_message "Pemeriksaan selesai!"
